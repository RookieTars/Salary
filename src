#include <stdio.h>
#include <string.h>
#include <ctype.h>
#include <time.h>
#define N 100
#define NMLEN 4

struct data {
	char num[NMLEN + 1];
	int iNum;
	char name[20];
	char sex[20];
	int yr,mon,dt,age;
	double pstSlry;//岗位工资
	double bnsSlry;//补贴总额
	double tSlry;//代扣总额
	double fSlry;//应发工资
};
typedef struct data Data;

int menu(void);//输出菜单 
int inputDrct(void);//输入提示 
int inputAData(Data *d);//输入一位员工的数据 
int inputData(Data s[], int num);//输入一组员工的数据 
int strToInt(char s[]);//将字符串数字转为整型 
int outputData(Data d[], int num);//输出原始数据 
int sort(Data s[], int num);//将员工数据按员工号升序排列
double maxFSlry(Data d[], int num);//统计最高应发工资 
double minFSlry(Data d[], int num);//统计最低应发工资 
double avrgFSlry(Data d[], int num);//统计平均应发工资 
int outputSData(Data d[], int num);//输出统计数据 
int searchData(Data d[], int num);//查找员工数据 
int search(Data d[], int target, int num);//折半查找 
int line(void);//分割线
int cntAge(int year, int month, int day);//根据出生日期判断年龄

int main() {
	static Data wData[N], sData[N];
	int cnt = 0, sglNum, i;
	char f='i';
	do
	{
		if (f != ' '&&f != '\n') {
			menu();
		}
		f = getchar();
		f = toupper(f);
		if (f != ' '&&f != '\n') {
			getchar();
		}
		sglNum = 0;
		if (f == 'I') {
			sglNum = inputDrct();
			inputData(&wData[cnt], sglNum);
			for (i = 0; i < sglNum; i++) {
				sData[cnt + i] = wData[cnt + i];
			}
			cnt += sglNum;
			sort(sData, cnt);
		}
		else if (f == 'O') {
			outputData(wData, cnt);
		}
		else if (f == 'T') {
			outputSData(sData, cnt);
		}
		else if (f == 'S') {
			outputData(sData, cnt);
		}
		else if (f == 'F') {
			searchData(sData, cnt);
		}
		else if (f != '\n'&&f != ' ') {
			puts(" 输入错误请重新输入。");
		}
		if (f != ' '&&f != '\n') {
			line();
		}
	} while (f != 'q');
	return 0;
}

int menu(void) {
	puts("****************************************");
	puts("*   I:输入员工工资信息                 *");
	puts("*   O:输出员工工资信息                 *");
	puts("*   T:输出员工工资统计信息             *");
	puts("*   S:按要求排序后输出员工工资信息     *");
	puts("*   F:按员工号查找并输出其工资信息     *");
	//	puts("*   D:按员工号查找并删除其工资信息     *");
	puts("*   Q:退出系统                         *");
	puts("****************************************");
	puts("请选择(I,O,T,S,F,Q):");
	return 0;
}
int inputDrct(void) {
	int addNum;
	puts("请输入要添加的数据组数：");
	scanf("%d", &addNum);
	getchar();
	puts("请输入员工的员工号、姓名、性别、出生日期、岗位工资、补贴总额、代扣总额。");
	puts("输入项目之间必须用<空格>分开！");
	puts("例如：1010 伍惺委 男 1990-10-20 3220 1500 300<回车>\n");
	puts("1、员工号是员工信息的唯一标识，不允许重复。长度<=4。");
	puts("员工号格式：第1位为1--9之间的数字，后面的字符可以是任意数字。");
	puts("2、姓名必须是2个以上的汉字，最多4个汉字。");
	puts("3、性别只能是男（M）或女（F）。");
	puts("4、出生日期格式：4位年-月-日 或 4位年.月.日(长度<=10)。");
	puts("年龄必须在18～60之间(不考虑男女退休年龄的区别)。");
	puts("5、0<=岗位工资、补贴总额、代扣总额<=99999。");
	puts("员工号   姓名     性别   出生日期   岗位工资   补贴总额   代扣总额");
	return addNum;
}
int inputAData(Data *d) {
	char t[10];
	scanf("%4s", (*d).num);
	scanf("%s", (*d).name);
	scanf("%s", t);
	if (!strcmp(t, "男") || !strcmp(t, "m") || !strcmp(t, "M")) {
		strcpy((*d).sex, "男");
	}
	else if (!strcmp(t, "女") || !strcmp(t, "f") || !strcmp(t, "F")) {
		strcpy((*d).sex, "女");
	}
	else {
		strcpy((*d).sex, "error");
	}
	scanf("%d%*c%d%*c%d", &(*d).yr, &(*d).mon, &(*d).dt);
	(*d).age = cntAge((*d).yr, (*d).mon, (*d).dt);
	scanf("%lf", &((*d).pstSlry));
	scanf("%lf", &((*d).bnsSlry));
	scanf("%lf", &((*d).tSlry));
	//	getchar();
	(*d).iNum = strToInt((*d).num);
	(*d).fSlry = (*d).pstSlry + (*d).bnsSlry - (*d).tSlry;
	getchar();
	if ((*d).age < 18 || (*d).age>60 || !strcmp((*d).sex, "error")) {
		puts("输入有误请重新输入");
		inputAData(d);
	}
	return 0;
}
int inputData(Data s[], int num) {
	int i;
	for (i = 0; i < num; i++) {
		inputAData(&s[i]);
	}
	puts("录入成功");
	return i;
}
int strToInt(char s[]) {
	int i, rslt = 0, len, temp;
	len = strlen(s);
	for (i = 0; i <= len - 1; i++) {
		temp = s[i] - '0';
		rslt = rslt * 10 + temp;
	}
	return rslt;
}
int outputData(Data d[], int num) {
	int i;
	if (num > 0) {
		puts("员工号   姓名     性别   年龄   岗位工资   补贴总额   代扣总额   应发工资");
		for (i = 0; i < num; i++) {
			printf("%-9s%-9s%-7s%-7d", d[i].num, d[i].name, d[i].sex, d[i].age);
			printf("%-11.2lf%-11.2lf%-11.2lf%-11.2lf\n", d[i].pstSlry, d[i].bnsSlry, d[i].tSlry, d[i].fSlry);
		}
	}
	else {
		puts("当前无数据！");
	}

	return 0;
}
int sort(Data d[], int num) {
	int i, j;
	Data temp;
	for (i = 0; i < num; i++) {
		for (j = i + 1; j < num; j++) {
			if (d[i].iNum > d[j].iNum) {
				temp = d[i];
				d[i] = d[j];
				d[j] = temp;
			}
		}
	}
	return 0;
}
double maxFSlry(Data d[], int num) {
	double max = 0.0;
	int i;
	for (i = 0; i < num; i++) {
		if (max < d[i].fSlry) {
			max = d[i].fSlry;
		}
	}
	return max;
}
double minFSlry(Data d[], int num) {
	int i;
	double min = d[0].fSlry;
	for (i = 1; i < num; i++) {
		if (min > d[i].fSlry) {
			min = d[i].fSlry;
		}
	}
	return min;
}
double avrgFSlry(Data d[], int num) {
	int i;
	double avrg = 0.0;
	for (i = 0; i < num; i++) {
		avrg += d[i].fSlry / num;
	}
	return avrg;
}
int outputSData(Data d[], int num) {
	double max, min, avrg;
	max = maxFSlry(d, num);
	min = minFSlry(d, num);
	avrg = avrgFSlry(d, num);
	printf("应发工资最高为：%.2lf，最低为：%.2lf，平均为：%.2lf所有员工应发工资总额为：%.2lf\n", max, min, avrg, avrg*num);
	//	outputData(d, num);
	return 0;
}
int searchData(Data d[], int num) {
	int index, trgt;
	char input[N + 1];
	puts("请输入需要查找的员工号：");
	scanf("%s", input);
	trgt = strToInt(input);
	index = search(d, trgt, num);
	if (index < 0) {
		printf("您要查找的内容不存在\n");
	}
	else {
		outputData(&d[index], 1);
	}
	return 0;
}
int search(Data d[], int target, int num) {
	int i, head, tail, result = -1;
	head = 0;
	tail = num - 1;
	while (head <= tail) {
		i = (head + tail) / 2;
		if (target < d[i].iNum) {
			tail = i - 1;
		}
		else if (target > d[i].iNum) {
			head = i + 1;
		}
		else {
			result = i;
			break;
		}
	}
	return result;
}
int line(void) {
	int i;
	putchar('\n');
	for (i = 0; i < 70; i++) {
		putchar('*');
	}
	putchar('\n');
	return 0;
}
int cntAge(int year, int month, int day) {
	int age,y,m,d;
	time_t timep;
	struct tm *p;
	time(&timep);
	p = localtime(&timep); //取得当地时间
	y = (1900 + p->tm_year);
	m = (1 + p->tm_mon);
	d = (p->tm_mday);
	age = y - year-1;
	if (m > month) {
		age++;
	}
	else if (m == month) {
		if (d >= day) {
			age++;
		}
	}
	return age;
}
